<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.xiebiao.tools</groupId>
  <artifactId>redisfx</artifactId>
  <version>1.0.0</version>
  <name>Redisfx</name>
  <description>A redis GUI tool powered by JavaFX</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit.version>5.10.2</junit.version>
    <javafx.version>24.0.1</javafx.version>
    <ikonli.version>12.4.0</ikonli.version>
    <atlantafx.version>2.1.0</atlantafx.version>
    <reactfx.version>1.4.1</reactfx.version>
    <jedis.version>5.0.0</jedis.version>
    <guava.version>32.1.1-jre</guava.version>
    <app.launcher>com.xiebiao.tools.redisfx.Launcher</app.launcher>
    <app.module>com.xiebiao.tools.redisfx</app.module>

    <build.dependenciesDir>${project.build.directory}${file.separator}dependencies
    </build.dependenciesDir>
    <build.package.appImageDir>${project.build.directory}${file.separator}app-image
    </build.package.appImageDir>
    <build.platformModulesDir>${project.build.directory}${file.separator}platform-modules
    </build.platformModulesDir>
    <build.package.tempDir>${project.build.directory}${file.separator}package-temp
    </build.package.tempDir>
    <build.package.runtimeImageDir>${project.build.directory}${file.separator}runtime-image
    </build.package.runtimeImageDir>
    <build.package.scriptsDir>${project.build.directory}${file.separator}package-scripts
    </build.package.scriptsDir>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.kordamp.ikonli</groupId>
        <artifactId>ikonli-bom</artifactId>
        <version>${ikonli.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <!-- jedis -->
    <dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>${jedis.version}</version>
    </dependency>
    <!-- jedis END -->
    <!-- event bus -->
    <dependency>
      <groupId>org.reactfx</groupId>
      <artifactId>reactfx</artifactId>
      <version>${reactfx.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <!-- event bus END -->
    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.17</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.5.18</version>
    </dependency>
    <!-- logging END -->
    <dependency>
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>3.50.3.0</version>
    </dependency>
    <!-- atlantafx -->
    <dependency>
      <groupId>io.github.mkpaz</groupId>
      <artifactId>atlantafx-base</artifactId>
      <version>${atlantafx.version}</version>
    </dependency>
    <!-- atlantafx END -->
    <!-- ikonli  -->
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-javafx</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-materialdesign2-pack</artifactId>
    </dependency>
    <!-- ikonli END -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>Redisfx</finalName>
    <resources>
      <!-- filter resources -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>com.xiebiao.tools.redisfx/application.properties</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources/com/xiebiao/tools/redisfx/icons</directory>
        <filtering>false</filtering>
        <targetPath>${project.build.directory}/icons</targetPath>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <source>23</source>
          <target>23</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>assembly</id>
            <phase>install</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.releaseDir}</outputDirectory>
              <finalName>${project.build.finalName}</finalName>
              <attach>false</attach>
              <appendAssemblyId>false</appendAssemblyId>
              <tarLongFileMode>posix</tarLongFileMode>
              <descriptors>
                <descriptor>src/package-scripts/app-image.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <!-- copy all dependencies that won't be included into runtime image -->
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.dependenciesDir}</outputDirectory>
              <includeScope>runtime</includeScope>
              <excludeGroupIds>org.openjfx</excludeGroupIds>
            </configuration>
          </execution>
          <!-- copy platform dependencies that will be included into runtime image -->
          <execution>
            <id>copy-openjfx</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${build.platformModulesDir}</outputDirectory>
              <includeGroupIds>org.openjfx</includeGroupIds>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <configuration>
          <!-- skip installation to the local repository -->
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <!-- copy application JAR file to the dependencies -->
        <configuration>
          <outputDirectory>${build.dependenciesDir}</outputDirectory>
        </configuration>
      </plugin>
      <plugin>
        <groupId>io.github.wiverson</groupId>
        <artifactId>jtoolprovider-plugin</artifactId>
        <version>1.0.34</version>
        <executions>
          <!-- create custom JRE image -->
          <execution>
            <id>create-runtime-image</id>
            <phase>package</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jlink</toolName>
              <addModules>
                java.base,java.logging,java.naming,java.management,jdk.localedata,jdk.zipfs,java.desktop,java.prefs,javafx.controls,javafx.fxml
              </addModules>
              <modulePath>${build.platformModulesDir}</modulePath>
              <output>${build.package.runtimeImageDir}</output>
              <args>
                <!-- additional options to shrink resulting image even more -->
                <arg>--compress=zip-9</arg>
                <arg>--include-locales=en</arg>
                <arg>--no-header-files</arg>
                <arg>--no-man-pages</arg>
                <arg>--strip-debug</arg>
                <arg>--verbose</arg>
                <arg>--generate-cds-archive</arg>
              </args>
            </configuration>
          </execution>
          <!-- create application image (includes JRE plus application JARs and resources) -->
          <execution>
            <id>create-app-image</id>
            <phase>package</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jpackage</toolName>
              <removeDirectories>${build.package.tempDir}</removeDirectories>
              <args>
                <arg>--name</arg>
                <arg>${project.name}</arg>
                <arg>--icon</arg>
                <arg>${app.icon}</arg>
                <arg>--app-version</arg>
                <arg>${project.version}</arg>
                <arg>--description</arg>
                <arg>${project.description}</arg>
                <arg>--copyright</arg>
                <arg>Copyright 2025</arg>
                <arg>--temp</arg>
                <arg>${build.package.tempDir}</arg>
                <arg>--verbose</arg>
                <arg>--type</arg>
                <arg>${app.type}</arg>
                <arg>--module</arg>
                <arg>${app.module}/${app.launcher}</arg>
                <arg>--module-path</arg>
                <arg>${build.dependenciesDir}</arg>
                <arg>--runtime-image</arg>
                <arg>${build.package.runtimeImageDir}</arg>
                <arg>--dest</arg>
                <arg>${build.package.appImageDir}</arg>

                <arg>--java-options</arg>
                <arg>--enable-native-access=javafx.graphics,javafx.media,javafx.web</arg>
                <arg>--java-options</arg>
                <arg>-Djavafx.enablePreview=true</arg>
              </args>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <executions>
          <execution>
            <!-- Default configuration for running with: mvn clean javafx:run -->
            <id>default-cli</id>
            <configuration>
              <mainClass>com.xiebiao.tools.redisfx.Launcher</mainClass>
              <options>
                <option>-Dredisfx.mode=dev</option>
                <option>--enable-native-access=javafx.graphics,javafx.media,javafx.web</option>
                <option>-Djavafx.enablePreview=true</option>
                <option>-Djavafx.suppressPreviewWarning=true</option>
              </options>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>mac</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <app.type>app-image</app.type>
        <app.icon>${project.build.directory}/icons/redisfx_512.icns</app.icon>
      </properties>
    </profile>
    <profile>
      <id>unix</id>
      <properties>
        <app.type>app-image</app.type>
        <app.icon>${project.build.directory}/icons/redisfx_512.png</app.icon>
      </properties>
    </profile>
    <profile>
      <id>win</id>
      <properties>
        <app.type>msi</app.type>
        <app.icon>${project.build.directory}/icons/redisfx_512.ico</app.icon>
      </properties>
    </profile>
  </profiles>
</project>